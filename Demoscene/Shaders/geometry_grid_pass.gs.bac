#version 330


layout (points) in;
in vec4 vs_position[];
layout (triangle_strip,max_vertices = 16) out;


out vec4 WorldPos0;                                                                 


uniform mat4  gWorld, gWVP;



void main()
{       

         //fColor = vColor[0];



        //gl_in[0].gl_Position = proj * view * model * gl_in[0].gl_Position;



        // +X direction is "North", -X direction is "South"
        // +Y direction is "Up",    -Y direction is "Down"
        // +Z direction is "East",  -Z direction is "West
        //                                     N/S   U/D   E/W

        vec4 NEU = vec4( 0.1,  0.1,  0.1, 0.0);

        vec4 NED = vec4( 0.1, -0.1,  0.1, 0.0);

        vec4 NWU = vec4( 0.1,  0.1, -0.1, 0.0);

        vec4 NWD =  vec4( 0.1, -0.1, -0.1, 0.0);

        vec4 SEU =  vec4(-0.1,  0.1,  0.1, 0.0);

        vec4 SED =  vec4(-0.1, -0.1,  0.1, 0.0);

        vec4 SWU =  vec4(-0.1,  0.1, -0.1, 0.0);

        vec4 SWD = vec4(-0.1, -0.1, -0.1, 0.0);



        // Create a cube centered on the given point.

		gl_Position = gWVP * gl_in[0].gl_Position + NED;
        WorldPos0 = gWorld * gl_in[0].gl_Position + NED;
		
        EmitVertex();


		gl_Position = gWVP * gl_in[0].gl_Position + NWD;
        WorldPos0 = gWorld * gl_in[0].gl_Position + NWD;

        EmitVertex();


		gl_Position = gWVP * gl_in[0].gl_Position + SWD;
        WorldPos0 = gWorld * gl_in[0].gl_Position + SWD;
		//gl_Position = gl_in[0].gl_Normal
        EmitVertex();
		//EndPrimitive();


		gl_Position = gWVP * gl_in[0].gl_Position + SED;
        WorldPos0 = gWorld * gl_in[0].gl_Position + SED;

        EmitVertex();


		gl_Position = gWVP * gl_in[0].gl_Position + SEU;
        WorldPos0 = gWorld * gl_in[0].gl_Position + SEU;

        EmitVertex();


		gl_Position = gWVP * gl_in[0].gl_Position + SWU;
        WorldPos0 = gWorld * gl_in[0].gl_Position + SWU;

        EmitVertex();
		
		
		//EndPrimitive();


		gl_Position = gWVP * gl_in[0].gl_Position + NWU;
        WorldPos0 = gWorld * gl_in[0].gl_Position + NWU;

        EmitVertex();


		gl_Position = gWVP * gl_in[0].gl_Position + NEU;
        WorldPos0 = gWorld *  gl_in[0].gl_Position + NEU;

        EmitVertex();


		gl_Position = gWVP * gl_in[0].gl_Position + NED;
        WorldPos0 = gWorld * gl_in[0].gl_Position + NED;

        EmitVertex();
		//EndPrimitive();

		gl_Position = gWVP * gl_in[0].gl_Position + SED;
        WorldPos0 = gWorld *  gl_in[0].gl_Position + SED;

        EmitVertex();


		gl_Position = gWVP * gl_in[0].gl_Position + SEU;
        WorldPos0 = gWorld *  gl_in[0].gl_Position + SEU;

        EmitVertex();


		gl_Position = gWVP * gl_in[0].gl_Position + NEU;
        WorldPos0 = gWorld * gl_in[0].gl_Position + NEU;

        EmitVertex();

		//EndPrimitive();

		gl_Position = gWVP * gl_in[0].gl_Position + NWU;
        WorldPos0 = gWorld * gl_in[0].gl_Position + NWU;

        EmitVertex();


		gl_Position = gWVP * gl_in[0].gl_Position + NWD;
        WorldPos0 = gWorld * gl_in[0].gl_Position + NWD;

        EmitVertex();


		gl_Position = gWVP * gl_in[0].gl_Position + SWD;
        WorldPos0 = gWorld * gl_in[0].gl_Position + SWD;

        EmitVertex();
		//EndPrimitive();

		gl_Position = gWVP * gl_in[0].gl_Position + SWU;
        WorldPos0 = gWorld * gl_in[0].gl_Position + SWU;

        EmitVertex();



        EndPrimitive();





    //TexCoord0      = TexCoord;                  

    //Normal0        = (gWorld * vec4(Normal, 0.0)).xyz;   

    //WorldPos0      = (gWorld * vec4(Position, 1.0)).xyz;


}
